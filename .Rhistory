install.packages("rmarkdown")
rmarkdown::render_site
rmarkdown::render_site
setwd("~/elizemiku.github.io")
rmarkdown::render_site
library("rmarkdown")
rmarkdown::render_site
rmarkdown::render_site()
setwd("~/elizemiku.github.io")
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("rmarkdown")
install.packages("rmarkdown")
setwd("~/elizemiku.github.io")
rmarkdown::render_site()
---
```{r, eval = FALSE}
plot_ly(mtcars, x = ~cyl, y=~mpg, color =~gear) %>%
layout(title = "Archeological Geochemistry",
xaxis = list(title = "X Axis Title",
side = "top"),
yaxis = list(title = "Y Axis Title"),
legend = list(orientation = "h"),
margin=list(t=100))
```
---
```{r, echo = FALSE}
plot_ly(mtcars, x = ~cyl, y=~mpg, color =~gear) %>%
layout(title = "Archeological Geochemistry",
xaxis = list(title = "X Axis Title",
side = "top"),
yaxis = list(title = "Y Axis Title"),
legend = list(orientation = "h"),
margin=list(t=100))
```
plot_ly
plot_ly
plot_ly
library("plotly")
plot_ly(mtcars, x = ~cyl, y=~mpg, color =~gear) %>%
layout(title = "Archeological Geochemistry",
xaxis = list(title = "X Axis Title",
side = "top"),
yaxis = list(title = "Y Axis Title"),
legend = list(orientation = "h"),
margin=list(t=100))
plot_ly(mtcars, x = ~cyl, y=~mpg, color =~gear) %>%
layout(title = "Archeological Geochemistry",
xaxis = list(title = "X Axis Title",
side = "top"),
yaxis = list(title = "Y Axis Title"),
legend = list(orientation = "h"),
margin=list(t=100))
library("dplyr") # for data manipulation
library("tidyr") # for data manipulation
library("broom") # for data statistical manipulation
library("ggplot2") # for plotting power curves
library("plotly") # for interactive power curves
library("highcharter") # for interactive power curves
set.seed(1234)
dat <- data.frame(
cond = factor(rep(c("trace 0", "trace 1"), each = 50)),
rating = c(rnorm(50), rnorm(50, mean = 1)))
mytheme <- theme_dark() +
theme(text = element_text(colour="blue"), axis.title = element_text(size = rel(1.25)))
#creating my own theme
p<-ggplot(dat, aes(x = cond, y = rating, fill = cond)) +
geom_boxplot() +
ggtitle("Box Plot") +
labs(fill="Condition") +
scale_fill_brewer(palette="Dark2") +
geom_text(label = 0) + annotate("text", label = "outlier", x= dat$cond[20], y = 2.6, size = 3, colour = "blue") +
##add name to the outlier
mytheme
ggplotly(p)
set.seed(1234)
dat<- data.frame(
cond = (rep(c("trace 0", "trace 1"), each = 50)),
rating = c(rnorm(50), rnorm(50, mean = 1))
)
p<-ggplot(dat,aes(x = cond, y = rating, fill = cond)) +
geom_boxplot() +
ggtitle("Box plot") +
labs(fill="Condition") +
scale_fill_brewer(palette="Accent") +
geom_point(position = position_jitter(width = 0.2)) +
theme_bw() +
theme(panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank())
ggplotly(p)
set.seed(1234)
a<-rnorm(50)
a2 <- rnorm(50, 1)
plot_ly(y = a, type = 'box') %>%
add_trace(y = a2) %>%
layout(title = 'Box Plot',xaxis = list(title = "cond", showgrid = F), yaxis = list(title = "rating"),
annotations = list(
x = -0.01,
y = boxplot.stats(a)$out,
text = "Outlier",
showarrow = FALSE,
xanchor = "right"
))
set.seed(1234)
dat <- data.frame(
cond = (rep(c("trace 0", "trace 1"), each = 50)),
rating = c(rnorm(50), rnorm(50, mean = 1))
)
hcboxplot(x = dat$rating, var = dat$cond, name = "cond", showInLegend = TRUE) %>%
hc_chart(type = "column") %>%
hc_title(text = "Box Plot")
set.seed(1234)
dat <- data.frame(
cond = (rep(c("trace 0", "trace 1"), each = 50)),
rating = c(rnorm(50), rnorm(50, mean = 1))
)
hcboxplot(x = dat$rating, var = dat$cond, name = "cond", showInLegend = TRUE) %>%
hc_chart(type = "column") %>%
hc_legend(align = "right", verticalAlign = "top",
layout = "vertical", x = 0, y = 100, enable = TRUE ) %>%
hc_title(text = "Box Plot") %>%
hc_add_theme(hc_theme_sandsignika())
set.seed(1234)
dat <- data.frame(cond = rep(c("A", "B"), each=50),
xvar = 1:50 + rnorm(50,sd=3),
yvar = 1:50 + rnorm(50,sd=3))
p<-ggplot(dat, aes(x=xvar, y=yvar), colour="blue") +
geom_point(shape=1, colour = "red") +
geom_smooth(method=lm) +
ggtitle("Linear Regression")
ggplotly(p)
set.seed(1234)
dat <- data.frame(cond = rep(c("A", "B"), each=50),
xvar = 1:50 + rnorm(50,sd=3),
yvar = 1:50 + rnorm(50,sd=3))
highchart() %>%
hc_add_series(dat, "point", hcaes(xvar, yvar, group = cond), regression = TRUE) %>%
hc_add_series(lm(yvar ~ xvar, data = dat), name = "Regression") %>%
hc_add_theme(hc_theme_google())
library("dplyr")
set.seed(1234)
centers <- data.frame(cluster=factor(1:3), size=c(100, 150, 50), x1=c(5, 0, -3), x2=c(-1, 1, -2))
points <- centers %>% group_by(cluster) %>%
do(data.frame(x1=rnorm(.$size[1], .$x1[1]),
x2=rnorm(.$size[1], .$x2[1])))
p<-ggplot(points, aes(x1, x2, color=cluster)) + geom_point() + ggtitle("Multivariate gaussian")
ggplotly(p)
library("dplyr")
set.seed(1234)
plot_ly(mtcars, x = ~cyl, y=~mpg, color =~gear, type = "box") %>%
layout(title = "Archeological Geochemistry",
xaxis = list(title = "X Axis Title",
side = "top"),
yaxis = list(title = "Y Axis Title"),
legend = list(orientation = "h"),
margin=list(t=100))
plot_ly(mtcars, x = ~cyl, y=~mpg) %>%
layout(title = "Archeological Geochemistry",
xaxis = list(title = "X Axis Title",
side = "top"),
yaxis = list(title = "Y Axis Title"),
legend = list(orientation = "h"),
margin=list(t=100))
plot_ly(mtcars, x = ~cyl, y=~mpg, type = "box") %>%
layout(title = "Archeological Geochemistry",
xaxis = list(title = "X Axis Title",
side = "top"),
yaxis = list(title = "Y Axis Title"),
legend = list(orientation = "h"),
margin=list(t=100))
setwd("~/Documents/Aprendendo shiny")
runApp(Adicionandoimagens)
runApp("Adicionandoimagens")
library("shiny")
runApp("Adicionandoimagens")
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("08_html") # Shiny app built from HTML
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
runExample("11_timer") # an automated timer
setwd("~/Documents/Aprendendo shiny/LESSON-3/Widgets")
setwd("~/Documents/Aprendendo shiny/LESSON-3/Widgets")
runApp("exemplo1")
library("highcharter")
install.packages(c("curl", "DBI", "maptools", "psych", "Rcpp", "readr", "rmarkdown", "shiny", "stringi", "survival", "tibble", "V8", "viridis", "viridisLite", "XML"))
install.packages(c("curl", "DBI", "maptools", "psych", "Rcpp", "readr", "rmarkdown", "shiny", "stringi", "survival", "tibble", "V8", "viridis", "viridisLite", "XML"))
install.packages(c("curl", "DBI", "maptools", "psych", "Rcpp", "readr", "rmarkdown", "shiny", "stringi", "survival", "tibble", "V8", "viridis", "viridisLite", "XML"))
